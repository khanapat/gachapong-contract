/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GachapongInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "WORKER_ROLE()": FunctionFragment;
    "buyLottery(address,uint8,uint256,uint256)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "closeRound(uint256,uint256)": FunctionFragment;
    "currencyManager()": FunctionFragment;
    "currentLotteryId()": FunctionFragment;
    "currentLotteryRound()": FunctionFragment;
    "generateRandom(uint256)": FunctionFragment;
    "getLotteries(address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,uint16,uint16)": FunctionFragment;
    "jackpot()": FunctionFragment;
    "lotteries(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setMultiplyReward(uint16,uint16)": FunctionFragment;
    "setWallet(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "threeDigitReward()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twoDigitReward()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateCurrencyManager(address)": FunctionFragment;
    "userLotteries(address,uint256,uint256)": FunctionFragment;
    "viewReward(uint256)": FunctionFragment;
    "wallet()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WORKER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyLottery",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentLotteryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentLotteryRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteries",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jackpot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lotteries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplyReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setWallet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "threeDigitReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "twoDigitReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCurrencyManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userLotteries",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WORKER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyLottery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currencyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLotteryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLotteryRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jackpot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lotteries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "threeDigitReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoDigitReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCurrencyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLotteries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;

  events: {
    "BuyLottery(uint256,uint256,address,uint8,uint256,uint256,address)": EventFragment;
    "ClaimReward(uint256,uint256,address,uint256,address)": EventFragment;
    "CloseRound(uint256,uint256,uint256)": EventFragment;
    "GenerateRandom(uint256,uint16,uint16)": EventFragment;
    "NewCurrencyManager(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyLottery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GenerateRandom"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCurrencyManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BuyLotteryEvent = TypedEvent<
  [BigNumber, BigNumber, string, number, BigNumber, BigNumber, string] & {
    round: BigNumber;
    id: BigNumber;
    buyer: string;
    lotteryType: number;
    number: BigNumber;
    amount: BigNumber;
    currency: string;
  }
>;

export type ClaimRewardEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string] & {
    round: BigNumber;
    id: BigNumber;
    owner: string;
    reward: BigNumber;
    currency: string;
  }
>;

export type CloseRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    round: BigNumber;
    twoDigitRef: BigNumber;
    threeDigitRef: BigNumber;
  }
>;

export type GenerateRandomEvent = TypedEvent<
  [BigNumber, number, number] & {
    round: BigNumber;
    twoDigitRandom: number;
    threeDigitRandom: number;
  }
>;

export type NewCurrencyManagerEvent = TypedEvent<
  [string] & { currencyManager: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class Gachapong extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GachapongInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WORKER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    buyLottery(
      _currency: string,
      _type: BigNumberish,
      _number: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeRound(
      _twoDigitRef: BigNumberish,
      _threeDigitRef: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currencyManager(overrides?: CallOverrides): Promise<[string]>;

    currentLotteryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentLotteryRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    generateRandom(
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLotteries(
      _user: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _wallet: string,
      _currencyManager: string,
      _jackpot: string,
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jackpot(overrides?: CallOverrides): Promise<[string]>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, string, string] & {
        lotteryRound: BigNumber;
        lotteryType: number;
        lotteryNumber: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, boolean] & {
        twoDigitRef: BigNumber;
        threeDigitRef: BigNumber;
        twoDigitNumber: number;
        threeDigitNumber: number;
        isClaimable: boolean;
      }
    >;

    setMultiplyReward(
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    threeDigitReward(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    twoDigitReward(overrides?: CallOverrides): Promise<[number]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCurrencyManager(
      _currencyManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userLotteries(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewReward(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wallet(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  WORKER_ROLE(overrides?: CallOverrides): Promise<string>;

  buyLottery(
    _currency: string,
    _type: BigNumberish,
    _number: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _lotteryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeRound(
    _twoDigitRef: BigNumberish,
    _threeDigitRef: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currencyManager(overrides?: CallOverrides): Promise<string>;

  currentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

  currentLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

  generateRandom(
    _round: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLotteries(
    _user: string,
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _wallet: string,
    _currencyManager: string,
    _jackpot: string,
    _twoDigitReward: BigNumberish,
    _threeDigitReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jackpot(overrides?: CallOverrides): Promise<string>;

  lotteries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, string, string] & {
      lotteryRound: BigNumber;
      lotteryType: number;
      lotteryNumber: BigNumber;
      amount: BigNumber;
      currency: string;
      owner: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, boolean] & {
      twoDigitRef: BigNumber;
      threeDigitRef: BigNumber;
      twoDigitNumber: number;
      threeDigitNumber: number;
      isClaimable: boolean;
    }
  >;

  setMultiplyReward(
    _twoDigitReward: BigNumberish,
    _threeDigitReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWallet(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  threeDigitReward(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  twoDigitReward(overrides?: CallOverrides): Promise<number>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCurrencyManager(
    _currencyManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userLotteries(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewReward(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wallet(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    WORKER_ROLE(overrides?: CallOverrides): Promise<string>;

    buyLottery(
      _currency: string,
      _type: BigNumberish,
      _number: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeRound(
      _twoDigitRef: BigNumberish,
      _threeDigitRef: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyManager(overrides?: CallOverrides): Promise<string>;

    currentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    currentLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

    generateRandom(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLotteries(
      _user: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _wallet: string,
      _currencyManager: string,
      _jackpot: string,
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    jackpot(overrides?: CallOverrides): Promise<string>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, string, string] & {
        lotteryRound: BigNumber;
        lotteryType: number;
        lotteryNumber: BigNumber;
        amount: BigNumber;
        currency: string;
        owner: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, boolean] & {
        twoDigitRef: BigNumber;
        threeDigitRef: BigNumber;
        twoDigitNumber: number;
        threeDigitNumber: number;
        isClaimable: boolean;
      }
    >;

    setMultiplyReward(
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallet(_wallet: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    threeDigitReward(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    twoDigitReward(overrides?: CallOverrides): Promise<number>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateCurrencyManager(
      _currencyManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userLotteries(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewReward(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BuyLottery(uint256,uint256,address,uint8,uint256,uint256,address)"(
      round?: BigNumberish | null,
      id?: BigNumberish | null,
      buyer?: null,
      lotteryType?: null,
      number?: null,
      amount?: null,
      currency?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, number, BigNumber, BigNumber, string],
      {
        round: BigNumber;
        id: BigNumber;
        buyer: string;
        lotteryType: number;
        number: BigNumber;
        amount: BigNumber;
        currency: string;
      }
    >;

    BuyLottery(
      round?: BigNumberish | null,
      id?: BigNumberish | null,
      buyer?: null,
      lotteryType?: null,
      number?: null,
      amount?: null,
      currency?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, number, BigNumber, BigNumber, string],
      {
        round: BigNumber;
        id: BigNumber;
        buyer: string;
        lotteryType: number;
        number: BigNumber;
        amount: BigNumber;
        currency: string;
      }
    >;

    "ClaimReward(uint256,uint256,address,uint256,address)"(
      round?: BigNumberish | null,
      id?: BigNumberish | null,
      owner?: null,
      reward?: null,
      currency?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, string],
      {
        round: BigNumber;
        id: BigNumber;
        owner: string;
        reward: BigNumber;
        currency: string;
      }
    >;

    ClaimReward(
      round?: BigNumberish | null,
      id?: BigNumberish | null,
      owner?: null,
      reward?: null,
      currency?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, string],
      {
        round: BigNumber;
        id: BigNumber;
        owner: string;
        reward: BigNumber;
        currency: string;
      }
    >;

    "CloseRound(uint256,uint256,uint256)"(
      round?: BigNumberish | null,
      twoDigitRef?: null,
      threeDigitRef?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { round: BigNumber; twoDigitRef: BigNumber; threeDigitRef: BigNumber }
    >;

    CloseRound(
      round?: BigNumberish | null,
      twoDigitRef?: null,
      threeDigitRef?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { round: BigNumber; twoDigitRef: BigNumber; threeDigitRef: BigNumber }
    >;

    "GenerateRandom(uint256,uint16,uint16)"(
      round?: BigNumberish | null,
      twoDigitRandom?: null,
      threeDigitRandom?: null
    ): TypedEventFilter<
      [BigNumber, number, number],
      { round: BigNumber; twoDigitRandom: number; threeDigitRandom: number }
    >;

    GenerateRandom(
      round?: BigNumberish | null,
      twoDigitRandom?: null,
      threeDigitRandom?: null
    ): TypedEventFilter<
      [BigNumber, number, number],
      { round: BigNumber; twoDigitRandom: number; threeDigitRandom: number }
    >;

    "NewCurrencyManager(address)"(
      currencyManager?: string | null
    ): TypedEventFilter<[string], { currencyManager: string }>;

    NewCurrencyManager(
      currencyManager?: string | null
    ): TypedEventFilter<[string], { currencyManager: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WORKER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    buyLottery(
      _currency: string,
      _type: BigNumberish,
      _number: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeRound(
      _twoDigitRef: BigNumberish,
      _threeDigitRef: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currencyManager(overrides?: CallOverrides): Promise<BigNumber>;

    currentLotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    currentLotteryRound(overrides?: CallOverrides): Promise<BigNumber>;

    generateRandom(
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLotteries(
      _user: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _wallet: string,
      _currencyManager: string,
      _jackpot: string,
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jackpot(overrides?: CallOverrides): Promise<BigNumber>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setMultiplyReward(
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    threeDigitReward(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    twoDigitReward(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCurrencyManager(
      _currencyManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userLotteries(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewReward(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WORKER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyLottery(
      _currency: string,
      _type: BigNumberish,
      _number: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeRound(
      _twoDigitRef: BigNumberish,
      _threeDigitRef: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currencyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentLotteryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentLotteryRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateRandom(
      _round: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLotteries(
      _user: string,
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _wallet: string,
      _currencyManager: string,
      _jackpot: string,
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jackpot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMultiplyReward(
      _twoDigitReward: BigNumberish,
      _threeDigitReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threeDigitReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    twoDigitReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCurrencyManager(
      _currencyManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userLotteries(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewReward(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
